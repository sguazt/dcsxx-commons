// Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
// rights reserved.

// License to copy and use this software is granted provided that it
// is identified as the "RSA Data Security, Inc. MD5 Message-Digest
// Algorithm" in all material mentioning or referencing this software
// or this function.
//
// License is also granted to make and use derivative works provided
// that such works are identified as "derived from the RSA Data
// Security, Inc. MD5 Message-Digest Algorithm" in all material
// mentioning or referencing the derived work.
//
// RSA Data Security, Inc. makes no representations concerning either
// the merchantability of this software or the suitability of this
// software for any particular purpose. It is provided "as is"
// without express or implied warranty of any kind.
//
// These notices must be retained in any copies of any part of this
// documentation and/or software.


#ifndef DCS_DIGEST_MD5_HPP
#define DCS_DIGEST_MD5_HPP


#include <cstdio>
#include <algorithm>
#include <boost/cstdint.hpp>
#include <boost/smart_ptr.hpp>
#include <cstring>
#include <cstddef>
#include <iomanip>
//#include <iostream>
#include <iterator>
#include <sstream>
#include <vector>


namespace dcs { namespace digest {

//BEGIN: to move in another header

typedef ::boost::uint8_t byte_type;

template <typename IterT>
::std::string hex_string(IterT first, IterT last)
{
	char digestChars[32];
	for(::std::size_t pos = 0; pos < 16; ++pos)
	{
		::std::sprintf( digestChars+(pos*2), "%02x", *(first+pos)) ;
	}
	return ::std::string(digestChars, 32);
//	::std::ostringstream oss;
//	//oss << ::std::hex << ::std::noshowbase << ::std::setw(2) << ::std::setfill('0');
//	oss << ::std::hex;
//	::std::copy(first,
//				last,
//				::std::ostream_iterator<byte_type>(oss, ""));
//
//	return oss.str();
}

//END: to move in another header


// See RFC-1321 (https://www.ietf.org/rfc/rfc1321.txt)
class md5
{
	//public: typedef ::boost::uint8_t byte_type;
	// POINTER defines a generic pointer type
	//private: typedef byte_type* pointer_type;
	// UINT2 defines a two byte word
	private: typedef ::boost::uint16_t byte2_type;
	// UINT4 defines a four byte word
	private: typedef ::boost::uint32_t byte4_type;


	private: static const ::std::size_t digest_size = 16;
	private: static const byte_type padding[64];
	// Constants for md5_transform routine.
	private: static const byte4_type S11 = 7;
	private: static const byte4_type S12 = 12;
	private: static const byte4_type S13 = 17;
	private: static const byte4_type S14 = 22;
	private: static const byte4_type S21 = 5;
	private: static const byte4_type S22 = 9;
	private: static const byte4_type S23 = 14;
	private: static const byte4_type S24 = 20;
	private: static const byte4_type S31 = 4;
	private: static const byte4_type S32 = 11;
	private: static const byte4_type S33 = 16;
	private: static const byte4_type S34 = 23;
	private: static const byte4_type S41 = 6;
	private: static const byte4_type S42 = 10;
	private: static const byte4_type S43 = 15;
	private: static const byte4_type S44 = 21;


	private: struct context
	{
		static const ::std::size_t state_size = 4;
		static const ::std::size_t count_size = 2;
		static const ::std::size_t buffer_size = 64;

		byte4_type state[state_size]; /* state (ABCD) */
		byte4_type count[count_size]; /* number of bits, modulo 2^64 (lsb first) */
		byte_type buffer[buffer_size]; /* input buffer */
	};


	public: md5()
	{
		this->reset();
	}


	// MD5 initialization. Begins an MD5 operation, writing a new context.
	public: void reset()
	{
		// Zeros sensitive information
		context_.count[0] = context_.count[1] = 0;
		::std::memset(&context_.buffer[0], context::buffer_size, 0);

		// Load magic initialization constants.
		context_.state[0] = 0x67452301;
		context_.state[1] = 0xefcdab89;
		context_.state[2] = 0x98badcfe;
		context_.state[3] = 0x10325476;
	}

	// MD5 block update operation. Continues an MD5 message-digest
	// operation, processing another message block, and updating the
	// context.
	public: template <typename IterT>
			void update(IterT first, IterT last)
	{
		::std::ptrdiff_t d(::std::distance(first, last));
		if (d < 0)
		{
			::std::swap(first, last);
			d = -d;
		}
		::std::size_t len = static_cast< ::std::size_t >(d);

		::boost::scoped_array<byte_type> buf(new byte_type[len]);
		byte_type* b = buf.get();

		update(b, len);
	}

	public: void update(byte_type const* input, ::std::size_t len)
	{
		// Compute number of bytes mod 64
		::std::size_t index = static_cast< ::std::size_t >((context_.count[0] >> 3) & 0x3F);

		// Update number of bits
		if ((context_.count[0] += (static_cast<byte4_type>(len) << 3)) < (static_cast<byte4_type>(len) << 3))
		{
			++(context_.count[1]);
		}
		context_.count[1] += static_cast<byte4_type>(len) >> 29;

		::std::size_t part_len(64-index);
		::std::size_t i(0);

		// Transform as many times as possible.
		if (len >= part_len)
		{
			::std::memcpy(&context_.buffer[index], input, part_len);
			md5_transform(context_.state, context_.buffer);

			for (i = part_len; (i + 63) < len; i += 64)
			{
				md5_transform(context_.state, &input[i]);
			}

			index = 0;
		}
		else
		{
			i = 0;
		}

		/* Buffer remaining input */
		::std::memcpy(&context_.buffer[index], &input[i], len-i);
	}

	// MD5 finalization. Ends an MD5 message-digest operation, writing the
	// the message digest and zeroizing the context.
	// Writes to digest_
	public: ::std::vector<byte_type> finish()
	{
		byte_type bits[8];
		::std::size_t pad_len(0);

		// Save number of bits
		encode(bits, context_.count, 8);

		// Pad out to 56 mod 64.
		::std::size_t index = static_cast< ::std::size_t >((context_.count[0] >> 3) & 0x3f);
		pad_len = (index < 56) ? (56 - index) : (120 - index);
		update(padding, pad_len);

		// Append length (before padding)
		update(bits, 8);

		// Store state in digest
		encode(digest_, context_.state, digest_size);

//		// Zeroize sensitive information.
//		::std::memset(reinterpret_cast<byte_type*>(&context_),
//					  0,
//					  sizeof(context_));

		::std::vector<byte_type> dig(digest_, digest_+digest_size);

		this->reset();

		return dig;
	}

	public: ::std::vector<byte_type> digest(byte_type const* data, ::std::size_t len)
	{
		this->reset();
		this->update(data, len);
		return this->finish();
	}

	public: template <typename IterT>
			::std::vector<byte_type> digest(IterT first, IterT last)
	{
		this->reset();
		this->update(first, last);
		return this->finish();
	}

	public: ::std::vector<byte_type> digest(::std::string const& s)
	{
		this->reset();
		this->update(s.begin(), s.end());
		return this->finish();
	}

	// The core of the MD5 algorithm is here.
	// MD5 basic transformation. Transforms state based on block.
	private: static void md5_transform(byte4_type state[4], byte_type const block[64])
	{
		byte4_type a = state[0];
		byte4_type b = state[1];
		byte4_type c = state[2];
		byte4_type d = state[3];
		byte4_type x[16];

		decode(x, block, 64);

		/* Round 1 */
		a = FF(a, b, c, d, x[ 0], S11, byte4_type(0xd76aa478)); /* 1 */
		d = FF(d, a, b, c, x[ 1], S12, byte4_type(0xe8c7b756)); /* 2 */
		c = FF(c, d, a, b, x[ 2], S13, byte4_type(0x242070db)); /* 3 */
		b = FF(b, c, d, a, x[ 3], S14, byte4_type(0xc1bdceee)); /* 4 */
		a = FF(a, b, c, d, x[ 4], S11, byte4_type(0xf57c0faf)); /* 5 */
		d = FF(d, a, b, c, x[ 5], S12, byte4_type(0x4787c62a)); /* 6 */
		c = FF(c, d, a, b, x[ 6], S13, byte4_type(0xa8304613)); /* 7 */
		b = FF(b, c, d, a, x[ 7], S14, byte4_type(0xfd469501)); /* 8 */
		a = FF(a, b, c, d, x[ 8], S11, byte4_type(0x698098d8)); /* 9 */
		d = FF(d, a, b, c, x[ 9], S12, byte4_type(0x8b44f7af)); /* 10 */
		c = FF(c, d, a, b, x[10], S13, byte4_type(0xffff5bb1)); /* 11 */
		b = FF(b, c, d, a, x[11], S14, byte4_type(0x895cd7be)); /* 12 */
		a = FF(a, b, c, d, x[12], S11, byte4_type(0x6b901122)); /* 13 */
		d = FF(d, a, b, c, x[13], S12, byte4_type(0xfd987193)); /* 14 */
		c = FF(c, d, a, b, x[14], S13, byte4_type(0xa679438e)); /* 15 */
		b = FF(b, c, d, a, x[15], S14, byte4_type(0x49b40821)); /* 16 */

		/* Round 2 */
		a = GG(a, b, c, d, x[ 1], S21, byte4_type(0xf61e2562)); /* 17 */
		d = GG(d, a, b, c, x[ 6], S22, byte4_type(0xc040b340)); /* 18 */
		c = GG(c, d, a, b, x[11], S23, byte4_type(0x265e5a51)); /* 19 */
		b = GG(b, c, d, a, x[ 0], S24, byte4_type(0xe9b6c7aa)); /* 20 */
		a = GG(a, b, c, d, x[ 5], S21, byte4_type(0xd62f105d)); /* 21 */
		d = GG(d, a, b, c, x[10], S22, byte4_type(0x02441453)); /* 22 */
		c = GG(c, d, a, b, x[15], S23, byte4_type(0xd8a1e681)); /* 23 */
		b = GG(b, c, d, a, x[ 4], S24, byte4_type(0xe7d3fbc8)); /* 24 */
		a = GG(a, b, c, d, x[ 9], S21, byte4_type(0x21e1cde6)); /* 25 */
		d = GG(d, a, b, c, x[14], S22, byte4_type(0xc33707d6)); /* 26 */
		c = GG(c, d, a, b, x[ 3], S23, byte4_type(0xf4d50d87)); /* 27 */
		b = GG(b, c, d, a, x[ 8], S24, byte4_type(0x455a14ed)); /* 28 */
		a = GG(a, b, c, d, x[13], S21, byte4_type(0xa9e3e905)); /* 29 */
		d = GG(d, a, b, c, x[ 2], S22, byte4_type(0xfcefa3f8)); /* 30 */
		c = GG(c, d, a, b, x[ 7], S23, byte4_type(0x676f02d9)); /* 31 */
		b = GG(b, c, d, a, x[12], S24, byte4_type(0x8d2a4c8a)); /* 32 */

		/* Round 3 */
		a = HH(a, b, c, d, x[ 5], S31, byte4_type(0xfffa3942)); /* 33 */
		d = HH(d, a, b, c, x[ 8], S32, byte4_type(0x8771f681)); /* 34 */
		c = HH(c, d, a, b, x[11], S33, byte4_type(0x6d9d6122)); /* 35 */
		b = HH(b, c, d, a, x[14], S34, byte4_type(0xfde5380c)); /* 36 */
		a = HH(a, b, c, d, x[ 1], S31, byte4_type(0xa4beea44)); /* 37 */
		d = HH(d, a, b, c, x[ 4], S32, byte4_type(0x4bdecfa9)); /* 38 */
		c = HH(c, d, a, b, x[ 7], S33, byte4_type(0xf6bb4b60)); /* 39 */
		b = HH(b, c, d, a, x[10], S34, byte4_type(0xbebfbc70)); /* 40 */
		a = HH(a, b, c, d, x[13], S31, byte4_type(0x289b7ec6)); /* 41 */
		d = HH(d, a, b, c, x[ 0], S32, byte4_type(0xeaa127fa)); /* 42 */
		c = HH(c, d, a, b, x[ 3], S33, byte4_type(0xd4ef3085)); /* 43 */
		b = HH(b, c, d, a, x[ 6], S34, byte4_type(0x04881d05)); /* 44 */
		a = HH(a, b, c, d, x[ 9], S31, byte4_type(0xd9d4d039)); /* 45 */
		d = HH(d, a, b, c, x[12], S32, byte4_type(0xe6db99e5)); /* 46 */
		c = HH(c, d, a, b, x[15], S33, byte4_type(0x1fa27cf8)); /* 47 */
		b = HH(b, c, d, a, x[ 2], S34, byte4_type(0xc4ac5665)); /* 48 */

		/* Round 4 */
		a = II(a, b, c, d, x[ 0], S41, byte4_type(0xf4292244)); /* 49 */
		d = II(d, a, b, c, x[ 7], S42, byte4_type(0x432aff97)); /* 50 */
		c = II(c, d, a, b, x[14], S43, byte4_type(0xab9423a7)); /* 51 */
		b = II(b, c, d, a, x[ 5], S44, byte4_type(0xfc93a039)); /* 52 */
		a = II(a, b, c, d, x[12], S41, byte4_type(0x655b59c3)); /* 53 */
		d = II(d, a, b, c, x[ 3], S42, byte4_type(0x8f0ccc92)); /* 54 */
		c = II(c, d, a, b, x[10], S43, byte4_type(0xffeff47d)); /* 55 */
		b = II(b, c, d, a, x[ 1], S44, byte4_type(0x85845dd1)); /* 56 */
		a = II(a, b, c, d, x[ 8], S41, byte4_type(0x6fa87e4f)); /* 57 */
		d = II(d, a, b, c, x[15], S42, byte4_type(0xfe2ce6e0)); /* 58 */
		c = II(c, d, a, b, x[ 6], S43, byte4_type(0xa3014314)); /* 59 */
		b = II(b, c, d, a, x[13], S44, byte4_type(0x4e0811a1)); /* 60 */
		a = II(a, b, c, d, x[ 4], S41, byte4_type(0xf7537e82)); /* 61 */
		d = II(d, a, b, c, x[11], S42, byte4_type(0xbd3af235)); /* 62 */
		c = II(c, d, a, b, x[ 2], S43, byte4_type(0x2ad7d2bb)); /* 63 */
		b = II(b, c, d, a, x[ 9], S44, byte4_type(0xeb86d391)); /* 64 */

		state[0] += a;
		state[1] += b;
		state[2] += c;
		state[3] += d;

		// Zeroize sensitive information.
		::std::memset(reinterpret_cast<byte_type*>(x), 0, sizeof(x));
	}

	// Encodes input (byte4_type) into output (byte_type). Assumes len is
	// a multiple of 4.
	private: static void encode(byte_type* output, byte4_type const* input, ::std::size_t len)
	{
		::std::size_t i(0);
		::std::size_t j(0);

		while (j < len)
		{
			output[j] = static_cast<byte_type>(input[i] & 0xff);
			output[j+1] = static_cast<byte_type>((input[i] >> 8) & 0xff);
			output[j+2] = static_cast<byte_type>((input[i] >> 16) & 0xff);
			output[j+3] = static_cast<byte_type>((input[i] >> 24) & 0xff);
			++i;
			j += 4;
		}
	}

	// Decodes input (unsigned char) into output (UINT4). Assumes len is
	// a multiple of 4.
	private: static void decode(byte4_type* output, byte_type const* input, ::std::size_t len )
	{
		::std::size_t i(0);
		::std::size_t j(0);

		for (i = 0, j = 0; j < len; i++, j += 4)
		while (j < len)
		{
			output[i] = static_cast<byte4_type>(input[j])
						| (static_cast<byte4_type>(input[j+1]) << 8)
						| (static_cast<byte4_type>(input[j+2]) << 16)
						| (static_cast<byte4_type>(input[j+3]) << 24);
			++i;
			j += 4;
		}
	}


/*
  /// Load a file from disk and digest it
  // Digests a file and returns the result.
  public: char* digestFile( char *filename )
  {
    Init() ;

    FILE *file;
    
    int len;
    unsigned char buffer[1024] ;

    if( (file = fopen (filename, "rb")) == NULL )
      printf( "%s can't be opened\n", filename ) ;
    else
    {
      while( len = fread( buffer, 1, 1024, file ) )
        Update( buffer, len ) ;
      Final();

      fclose( file );
    }

    return digestChars ;
  }
*/
	// F, G, H and I are basic MD5 functions.
	private: template <typename T>
			 static T F(T x, T y, T z)
	{
		return (x & y) | (~x & z);
	}

	private: template <typename T>
			 static T G(T x, T y, T z)
	{
		return (((x) & (z)) | ((y) & (~z)));
	}

	private: template <typename T>
			 static T H(T x, T y, T z)
	{
		return ((x) ^ (y) ^ (z));
	}

	private: template <typename T>
			 static T I(T x, T y, T z)
	{
		return ((y) ^ ((x) | (~z)));
	}

	// ROTATE_LEFT rotates x left n bits.
	private: template <typename T>
			 static T ROTATE_LEFT(T x, T n)
	{
		return (((x) << (n)) | ((x) >> (32-(n))));
	}

	// FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
	// Rotation is separate from addition to prevent recomputation.
	private: template <typename T>
			 static T FF(T a, T b, T c, T d, T x, T s, T ac)
	{
		a += F(b, c, d) + x + static_cast<byte4_type>(ac);
		a = ROTATE_LEFT(a, s);
		a += b;

		return a;
	}

	private: template <typename T>
			 static T GG(T a, T b, T c, T d, T x, T s, T ac)
	{
		a += G(b, c, d) + x + static_cast<byte4_type>(ac);
		a = ROTATE_LEFT(a, s);
		a += b;

		return a;
	}

	private: template <typename T>
			 static T HH(T a, T b, T c, T d, T x, T s, T ac)
	{
		a += H(b, c, d) + x + static_cast<byte4_type>(ac);
		a = ROTATE_LEFT(a, s);
		a += b;

		return a;
	}

	private: template <typename T>
			 static T II(T a, T b, T c, T d, T x, T s, T ac)
	{
		a += I(b, c, d) + x + static_cast<byte4_type>(ac);
		a = ROTATE_LEFT(a, s);
		a += b;

		return a;
	}


	private: context context_;
	private: byte_type digest_[digest_size] ; ///< The MD5 digest (16-byte number, i.e., 32 hex digits)

}; // md5

const byte_type md5::padding[] = {
	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

}} // Namespace dcs::digest

#endif // DCS_DIGEST_MD5_HPP
