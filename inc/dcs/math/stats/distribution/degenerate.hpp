/**
 * \file src/dcs/math/stats/distribution/degenerate.hpp
 *
 * \brief Degenerate distribution.
 *
 * \author Marco Guazzone (marco.guazzone@gmail.com)
 *
 * <hr/>
 *
 * Copyright 2009 Marco Guazzone (marco.guazzone@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef DCS_MATH_STATS_DISTRIBUTION_DEGENERATE_HPP
#define DCS_MATH_STATS_DISTRIBUTION_DEGENERATE_HPP


#include <cstddef>
#include <dcs/macro.hpp>
#include <dcs/math/policies.hpp>
#include <iostream>
#include <vector>


namespace dcs { namespace math { namespace stats {

/**
 * \brief Degenerate distribution.
 *
 * A <em>degenerate distribution</em> is the probability distribution of the
 * <em>constant random variable</em>, a discrete random variable whose support
 * consists of only one value.
 *
 * The degenerate distribution is localized at a point \f$k_0\f$ on the real
 * axis.
 * The probability mass function is given by:
 * \f{equation*}{
 *   f(k;k_0)=\begin{cases}
 *              1, & \text{if }k=k_0 \\
 *              0, & \text{if }k \ne k_0
 *             \end{cases}
 * \f}
 * The cumulative distribution function of the degenerate distribution is:
 * \f{equation}{
 *   F(k;k_0)=\begin{cases}
 *   			1, & \text{if }k\ge k_0 \\
 *   			0, & \text{if }k<k_0
 *   		  \end{cases}
 * \f}
 *
 * \author Marco Guazzone (marco.guazzone@gmail.com)
 */
template <
	typename RealT=double,
	typename PolicyT=::dcs::math::policies::policy<>
>
class degenerate_distribution
{
	public: typedef RealT support_type;
	public: typedef RealT value_type;
	public: typedef PolicyT policy_type;


	/// A constructor.
	public: explicit degenerate_distribution(support_type v=support_type/*0*/())
	: k0_(v)
	{
	}


	/// Return the constant value
	public: support_type value() const
	{
		return k0_;
	}


	/// Compute the PDF for the given value.
	public: value_type pdf(support_type x) const
	{
		return (x == k0_) ? 1.0 : 0.0;
	}


	/// Compute the CDF for the given value.
	public: value_type cdf(support_type x) const
	{
		return (x >= k0_) ? 1.0 : 0.0;
	}


	// Compute the quantile value corresponding to the given probability value.
	public: support_type quantile(value_type p) const
	{
		return k0_;
	}


	/// Generate a random variate distributed according to this distribution and
	/// generated by means of the given uniform random number generator.
	public: template <typename UniformRandomGeneratorT>
		support_type rand(UniformRandomGeneratorT& rng) const
	{
		DCS_MACRO_SUPPRESS_UNUSED_VARIABLE_WARNING( rng );

		return k0_;
	}


	/// Generate \a n random variates distributed according to this distribution
	/// and generated by means of the given uniform random number generator.
	public: template <typename UniformRandomGeneratorT>
		::std::vector<support_type> rand(UniformRandomGeneratorT& rng, ::std::size_t n) const
	{
		DCS_MACRO_SUPPRESS_UNUSED_VARIABLE_WARNING( rng );

		return ::std::vector<support_type>(n, k0_);
	}


	public: value_type mean() const
	{
		return k0_;
	}


	public: value_type median() const
	{
		return k0_;
	}


	public: value_type variance() const
	{
		return 0;
	}


	/// The solely value
	private: support_type k0_;
};


template <typename RealT, typename PolicyT>
RealT mean(degenerate_distribution<RealT,PolicyT> const& d)
{
	return d.mean();
}


template <typename RealT, typename PolicyT>
RealT variance(degenerate_distribution<RealT,PolicyT> const& d)
{
	return d.variance();
}


template <typename RealT, typename PolicyT>
RealT standard_deviation(degenerate_distribution<RealT,PolicyT> const& d)
{
	return ::std::sqrt(d.variance());
}


template <
	typename CharT,
	typename CharTraitsT,
	typename RealT,
	typename PolicyT
>
::std::basic_ostream<CharT,CharTraitsT>& operator<<(::std::basic_ostream<CharT,CharTraitsT>& os, degenerate_distribution<RealT,PolicyT> const& dist)
{
	os << "Degenerate(" << dist.value() << ")";

	return os;
}

}}} // Namespace dcs::math::stats
#endif // DCS_MATH_STATS_DISTRIBUTION_DEGENERATE_HPP
